apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cryptpad-helm.fullname" . }}
  labels:
    {{- include "cryptpad-helm.labels" . | nindent 4 }}
data:
  config.js: |
    /* globals module */

    module.exports = {
          {{- if .Values.ingress.enabled}}  
            httpUnsafeOrigin: 'https://{{ (index .Values.ingress.hosts 0).host }}',
          {{- else if .Values.config.httpUnsafeOrigin }}
            httpUnsafeOrigin: {{ .Values.config.httpUnsafeOrigin | quote }}, 
          {{- else }}
            httpUnsafeOrigin: 'http://localhost:3000',
          {{- end}}
       
          {{- if .Values.ingress.enabled }}
            httpSafeOrigin: 'https://{{ (index .Values.ingress.hosts 0).host }}',
          {{- else if .Values.config.httpSafeOrigin }}  
            httpSafeOrigin: {{ .Values.config.httpSafeOrigin | quote }}, 
          {{- else }}
            httpSafeOrigin: 'http://localhost:3000',
          {{- end}}

          {{- if .Values.config.adminKeys }}
            adminKeys: [
              {{- range $key := .Values.config.adminKeys }}
                {{ $key | quote }}, 
              {{- end }}
            ],
          {{- else}}
            adminKeys: [],
          {{- end}}

          {{- range $key, $value := .Values.config }}
            {{- if and (or (ne $key "httpUnsafeOrigin") (ne $key "httpSafeOrigin")) (ne $key "adminKeys") }}
              {{ $key }}: {{ $value | quote }},
            {{- end }}
          {{- end }}


        };
  application_config.js: |
    /*
    * You can override the configurable values from this file.
    * The recommended method is to make a copy of this file (/customize.dist/application_config.js)
      in a 'customize' directory (/customize/application_config.js).
    * If you want to check all the configurable values, you can open the internal configuration file
      but you should not change it directly (/common/application_config_internal.js)
    */
    define(['/common/application_config_internal.js'], function (AppConfig) {

        {{- range $key, $value := .Values.application_config }}
          AppConfig.{{ $key }} =  {{ $value | toJson }};
        {{- end }}

        return AppConfig;
    });
